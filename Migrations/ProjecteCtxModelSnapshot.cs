// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjecteBLD.Data;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ProjecteCtx))]
    partial class ProjecteCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjecteBLD.Model.Map", b =>
                {
                    b.Property<string>("downloadlink")
                        .HasColumnType("varchar(200)");

                    b.HasKey("downloadlink");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("ProjecteBLD.Model.Map_Info", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("authorusername")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("description")
                        .HasColumnType("varchar(300)");

                    b.Property<byte[]>("icon")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("mapdownloadlink")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.HasIndex("authorusername");

                    b.HasIndex("mapdownloadlink");

                    b.ToTable("Maps_Info");
                });

            modelBuilder.Entity("ProjecteBLD.Model.Map_Info_Player", b =>
                {
                    b.Property<string>("playerFK")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("mapInfoFK")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("completed")
                        .HasColumnType("boolean");

                    b.Property<int>("time")
                        .HasColumnType("integer");

                    b.HasKey("playerFK", "mapInfoFK");

                    b.HasIndex("mapInfoFK");

                    b.ToTable("Maps_Info_Player");
                });

            modelBuilder.Entity("ProjecteBLD.Model.Player", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("username");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ProjecteBLD.Model.Map_Info", b =>
                {
                    b.HasOne("ProjecteBLD.Model.Player", "author")
                        .WithMany()
                        .HasForeignKey("authorusername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjecteBLD.Model.Map", "map")
                        .WithMany()
                        .HasForeignKey("mapdownloadlink");

                    b.Navigation("author");

                    b.Navigation("map");
                });

            modelBuilder.Entity("ProjecteBLD.Model.Map_Info_Player", b =>
                {
                    b.HasOne("ProjecteBLD.Model.Map_Info", "mapInfo")
                        .WithMany("players")
                        .HasForeignKey("mapInfoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjecteBLD.Model.Player", "player")
                        .WithMany("maps")
                        .HasForeignKey("playerFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mapInfo");

                    b.Navigation("player");
                });

            modelBuilder.Entity("ProjecteBLD.Model.Map_Info", b =>
                {
                    b.Navigation("players");
                });

            modelBuilder.Entity("ProjecteBLD.Model.Player", b =>
                {
                    b.Navigation("maps");
                });
#pragma warning restore 612, 618
        }
    }
}
